// Code generated by protoc-gen-go. DO NOT EDIT.
// source: exchange.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	exchange.proto

It has these top-level messages:
	Order
	TradeEvent
	OrderBookEvent
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type TradingPair int32

const (
	TradingPair_TRADING_PAIR_UNKNOWN TradingPair = 0
	TradingPair_BTC_USD              TradingPair = 1
	TradingPair_BTC_THB              TradingPair = 2
)

var TradingPair_name = map[int32]string{
	0: "TRADING_PAIR_UNKNOWN",
	1: "BTC_USD",
	2: "BTC_THB",
}
var TradingPair_value = map[string]int32{
	"TRADING_PAIR_UNKNOWN": 0,
	"BTC_USD":              1,
	"BTC_THB":              2,
}

func (x TradingPair) String() string {
	return proto1.EnumName(TradingPair_name, int32(x))
}
func (TradingPair) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Order_Type int32

const (
	Order_TYPE_UNKNOWN Order_Type = 0
	Order_MARKET       Order_Type = 1
	Order_LIMIT        Order_Type = 2
	Order_CANCEL       Order_Type = 3
)

var Order_Type_name = map[int32]string{
	0: "TYPE_UNKNOWN",
	1: "MARKET",
	2: "LIMIT",
	3: "CANCEL",
}
var Order_Type_value = map[string]int32{
	"TYPE_UNKNOWN": 0,
	"MARKET":       1,
	"LIMIT":        2,
	"CANCEL":       3,
}

func (x Order_Type) String() string {
	return proto1.EnumName(Order_Type_name, int32(x))
}
func (Order_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type OrderBookEvent_Type int32

const (
	OrderBookEvent_TYPE_UNKNOWN OrderBookEvent_Type = 0
	OrderBookEvent_ADD          OrderBookEvent_Type = 1
	OrderBookEvent_REMOVE       OrderBookEvent_Type = 2
)

var OrderBookEvent_Type_name = map[int32]string{
	0: "TYPE_UNKNOWN",
	1: "ADD",
	2: "REMOVE",
}
var OrderBookEvent_Type_value = map[string]int32{
	"TYPE_UNKNOWN": 0,
	"ADD":          1,
	"REMOVE":       2,
}

func (x OrderBookEvent_Type) String() string {
	return proto1.EnumName(OrderBookEvent_Type_name, int32(x))
}
func (OrderBookEvent_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type Order struct {
	OrderId   string                     `protobuf:"bytes,1,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Type      Order_Type                 `protobuf:"varint,3,opt,name=type,enum=proto.Order_Type" json:"type,omitempty"`
	IsSell    bool                       `protobuf:"varint,4,opt,name=is_sell,json=isSell" json:"is_sell,omitempty"`
	Price     float64                    `protobuf:"fixed64,5,opt,name=price" json:"price,omitempty"`
	Volume    float64                    `protobuf:"fixed64,6,opt,name=volume" json:"volume,omitempty"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto1.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Order) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *Order) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Order) GetType() Order_Type {
	if m != nil {
		return m.Type
	}
	return Order_TYPE_UNKNOWN
}

func (m *Order) GetIsSell() bool {
	if m != nil {
		return m.IsSell
	}
	return false
}

func (m *Order) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Order) GetVolume() float64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

type TradeEvent struct {
	OrderId       string                     `protobuf:"bytes,1,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	Timestamp     *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	IsTaker       bool                       `protobuf:"varint,3,opt,name=is_taker,json=isTaker" json:"is_taker,omitempty"`
	IsSell        bool                       `protobuf:"varint,4,opt,name=is_sell,json=isSell" json:"is_sell,omitempty"`
	Price         float64                    `protobuf:"fixed64,5,opt,name=price" json:"price,omitempty"`
	MatchedVolume float64                    `protobuf:"fixed64,6,opt,name=matched_volume,json=matchedVolume" json:"matched_volume,omitempty"`
	LeftVolume    float64                    `protobuf:"fixed64,7,opt,name=left_volume,json=leftVolume" json:"left_volume,omitempty"`
}

func (m *TradeEvent) Reset()                    { *m = TradeEvent{} }
func (m *TradeEvent) String() string            { return proto1.CompactTextString(m) }
func (*TradeEvent) ProtoMessage()               {}
func (*TradeEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TradeEvent) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *TradeEvent) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *TradeEvent) GetIsTaker() bool {
	if m != nil {
		return m.IsTaker
	}
	return false
}

func (m *TradeEvent) GetIsSell() bool {
	if m != nil {
		return m.IsSell
	}
	return false
}

func (m *TradeEvent) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *TradeEvent) GetMatchedVolume() float64 {
	if m != nil {
		return m.MatchedVolume
	}
	return 0
}

func (m *TradeEvent) GetLeftVolume() float64 {
	if m != nil {
		return m.LeftVolume
	}
	return 0
}

type OrderBookEvent struct {
	OrderId   string                     `protobuf:"bytes,1,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	IsSell    bool                       `protobuf:"varint,3,opt,name=is_sell,json=isSell" json:"is_sell,omitempty"`
	Price     float64                    `protobuf:"fixed64,4,opt,name=price" json:"price,omitempty"`
	Volume    float64                    `protobuf:"fixed64,5,opt,name=volume" json:"volume,omitempty"`
}

func (m *OrderBookEvent) Reset()                    { *m = OrderBookEvent{} }
func (m *OrderBookEvent) String() string            { return proto1.CompactTextString(m) }
func (*OrderBookEvent) ProtoMessage()               {}
func (*OrderBookEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *OrderBookEvent) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *OrderBookEvent) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *OrderBookEvent) GetIsSell() bool {
	if m != nil {
		return m.IsSell
	}
	return false
}

func (m *OrderBookEvent) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *OrderBookEvent) GetVolume() float64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func init() {
	proto1.RegisterType((*Order)(nil), "proto.Order")
	proto1.RegisterType((*TradeEvent)(nil), "proto.TradeEvent")
	proto1.RegisterType((*OrderBookEvent)(nil), "proto.OrderBookEvent")
	proto1.RegisterEnum("proto.TradingPair", TradingPair_name, TradingPair_value)
	proto1.RegisterEnum("proto.Order_Type", Order_Type_name, Order_Type_value)
	proto1.RegisterEnum("proto.OrderBookEvent_Type", OrderBookEvent_Type_name, OrderBookEvent_Type_value)
}

func init() { proto1.RegisterFile("exchange.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 434 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x51, 0xc1, 0x6e, 0x9b, 0x40,
	0x14, 0xec, 0x62, 0x03, 0xf6, 0x73, 0x6b, 0xd1, 0x55, 0xd4, 0x92, 0x5c, 0x82, 0x2c, 0x45, 0x42,
	0x95, 0x4a, 0xa4, 0xf4, 0x52, 0xa9, 0x27, 0x6c, 0xa3, 0x16, 0x25, 0xc6, 0xd6, 0x66, 0x93, 0xaa,
	0x27, 0x44, 0xcc, 0x8b, 0xb3, 0x0a, 0x18, 0x04, 0x24, 0x6a, 0xbe, 0xa0, 0x1f, 0xd9, 0xcf, 0xe8,
	0x0f, 0x54, 0xbb, 0xd8, 0x6d, 0x22, 0xa5, 0x87, 0x1e, 0x7c, 0x82, 0x19, 0xe6, 0x0d, 0x9a, 0x19,
	0x18, 0xe2, 0xf7, 0xe5, 0x4d, 0xb2, 0x5e, 0xa1, 0x57, 0x56, 0x45, 0x53, 0x50, 0x5d, 0x3d, 0x0e,
	0x0e, 0x57, 0x45, 0xb1, 0xca, 0xf0, 0x58, 0xa1, 0xab, 0xbb, 0xeb, 0xe3, 0x46, 0xe4, 0x58, 0x37,
	0x49, 0x5e, 0xb6, 0xba, 0xd1, 0x0f, 0x0d, 0xf4, 0x79, 0x95, 0x62, 0x45, 0xf7, 0xa1, 0x57, 0xc8,
	0x97, 0x58, 0xa4, 0x36, 0x71, 0x88, 0xdb, 0x67, 0xa6, 0xc2, 0x61, 0x4a, 0x3f, 0x42, 0xff, 0xcf,
	0x9d, 0xad, 0x39, 0xc4, 0x1d, 0x9c, 0x1c, 0x78, 0xad, 0xb3, 0xb7, 0x75, 0xf6, 0xf8, 0x56, 0xc1,
	0xfe, 0x8a, 0xe9, 0x11, 0x74, 0x9b, 0x87, 0x12, 0xed, 0x8e, 0x43, 0xdc, 0xe1, 0xc9, 0xeb, 0x56,
	0xed, 0xa9, 0x1f, 0x7a, 0xfc, 0xa1, 0x44, 0xa6, 0x3e, 0xd3, 0xb7, 0x60, 0x8a, 0x3a, 0xae, 0x31,
	0xcb, 0xec, 0xae, 0x43, 0xdc, 0x1e, 0x33, 0x44, 0x7d, 0x8e, 0x59, 0x46, 0xf7, 0x40, 0x2f, 0x2b,
	0xb1, 0x44, 0x5b, 0x77, 0x88, 0x4b, 0x58, 0x0b, 0xe8, 0x1b, 0x30, 0xee, 0x8b, 0xec, 0x2e, 0x47,
	0xdb, 0x50, 0xf4, 0x06, 0x8d, 0x3e, 0x41, 0x57, 0x9a, 0x52, 0x0b, 0x5e, 0xf2, 0x6f, 0x8b, 0x20,
	0xbe, 0x88, 0x4e, 0xa3, 0xf9, 0xd7, 0xc8, 0x7a, 0x41, 0x01, 0x8c, 0x99, 0xcf, 0x4e, 0x03, 0x6e,
	0x11, 0xda, 0x07, 0xfd, 0x2c, 0x9c, 0x85, 0xdc, 0xd2, 0x24, 0x3d, 0xf1, 0xa3, 0x49, 0x70, 0x66,
	0x75, 0x46, 0xbf, 0x08, 0x00, 0xaf, 0x92, 0x14, 0x83, 0x7b, 0x5c, 0x37, 0xbb, 0xa9, 0x63, 0x1f,
	0x7a, 0xa2, 0x8e, 0x9b, 0xe4, 0x16, 0x2b, 0x55, 0x49, 0x8f, 0x99, 0xa2, 0xe6, 0x12, 0xfe, 0x6f,
	0x05, 0x47, 0x30, 0xcc, 0x93, 0x66, 0x79, 0x83, 0x69, 0xfc, 0xa4, 0x8a, 0x57, 0x1b, 0xf6, 0x52,
	0x91, 0xf4, 0x10, 0x06, 0x19, 0x5e, 0x37, 0x5b, 0x8d, 0xa9, 0x34, 0x20, 0xa9, 0x56, 0x30, 0xfa,
	0x49, 0x60, 0xa8, 0xe6, 0x18, 0x17, 0xc5, 0xed, 0x0e, 0x93, 0x3f, 0x8a, 0xd7, 0x79, 0x3e, 0x5e,
	0xf7, 0xf9, 0x85, 0xf5, 0x27, 0x0b, 0xbf, 0xff, 0xe7, 0xc2, 0x26, 0x74, 0xfc, 0xe9, 0xd4, 0x22,
	0x72, 0x53, 0x16, 0xcc, 0xe6, 0x97, 0x81, 0xa5, 0xbd, 0xf3, 0x61, 0x20, 0x27, 0x15, 0xeb, 0xd5,
	0x22, 0x11, 0x15, 0xb5, 0x61, 0x8f, 0x33, 0x7f, 0x1a, 0x46, 0x9f, 0xe3, 0x85, 0x1f, 0xb2, 0x47,
	0xd7, 0x03, 0x30, 0xc7, 0x7c, 0x12, 0x5f, 0x9c, 0x4b, 0x87, 0x0d, 0xe0, 0x5f, 0xc6, 0x96, 0x76,
	0x65, 0xa8, 0x5c, 0x1f, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x5a, 0x02, 0x7c, 0xfb, 0x61, 0x03,
	0x00, 0x00,
}

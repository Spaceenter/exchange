// Code generated by protoc-gen-go. DO NOT EDIT.
// source: exchange.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	exchange.proto

It has these top-level messages:
	OrderItem
	MatchedOrder
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type TradingPair int32

const (
	TradingPair_TRADING_PAIR_UNKNOWN TradingPair = 0
	TradingPair_BTC_USD              TradingPair = 1
	TradingPair_BTC_THB              TradingPair = 2
)

var TradingPair_name = map[int32]string{
	0: "TRADING_PAIR_UNKNOWN",
	1: "BTC_USD",
	2: "BTC_THB",
}
var TradingPair_value = map[string]int32{
	"TRADING_PAIR_UNKNOWN": 0,
	"BTC_USD":              1,
	"BTC_THB":              2,
}

func (x TradingPair) String() string {
	return proto1.EnumName(TradingPair_name, int32(x))
}
func (TradingPair) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type OrderType int32

const (
	OrderType_TYPE_UNKNOWN OrderType = 0
	OrderType_MARKET       OrderType = 1
	OrderType_LIMIT        OrderType = 2
	OrderType_CANCEL       OrderType = 3
)

var OrderType_name = map[int32]string{
	0: "TYPE_UNKNOWN",
	1: "MARKET",
	2: "LIMIT",
	3: "CANCEL",
}
var OrderType_value = map[string]int32{
	"TYPE_UNKNOWN": 0,
	"MARKET":       1,
	"LIMIT":        2,
	"CANCEL":       3,
}

func (x OrderType) String() string {
	return proto1.EnumName(OrderType_name, int32(x))
}
func (OrderType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Position int32

const (
	Position_POSITION_UNKNOWN Position = 0
	Position_BID              Position = 1
	Position_ASK              Position = 2
)

var Position_name = map[int32]string{
	0: "POSITION_UNKNOWN",
	1: "BID",
	2: "ASK",
}
var Position_value = map[string]int32{
	"POSITION_UNKNOWN": 0,
	"BID":              1,
	"ASK":              2,
}

func (x Position) String() string {
	return proto1.EnumName(Position_name, int32(x))
}
func (Position) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type OrderItem struct {
	OrderId   string                     `protobuf:"bytes,1,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Type      OrderType                  `protobuf:"varint,4,opt,name=type,enum=proto.OrderType" json:"type,omitempty"`
	Position  Position                   `protobuf:"varint,5,opt,name=position,enum=proto.Position" json:"position,omitempty"`
	Price     float64                    `protobuf:"fixed64,6,opt,name=price" json:"price,omitempty"`
	Volume    float64                    `protobuf:"fixed64,7,opt,name=volume" json:"volume,omitempty"`
}

func (m *OrderItem) Reset()                    { *m = OrderItem{} }
func (m *OrderItem) String() string            { return proto1.CompactTextString(m) }
func (*OrderItem) ProtoMessage()               {}
func (*OrderItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OrderItem) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *OrderItem) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *OrderItem) GetType() OrderType {
	if m != nil {
		return m.Type
	}
	return OrderType_TYPE_UNKNOWN
}

func (m *OrderItem) GetPosition() Position {
	if m != nil {
		return m.Position
	}
	return Position_POSITION_UNKNOWN
}

func (m *OrderItem) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *OrderItem) GetVolume() float64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

type MatchedOrder struct {
	OrderId       string    `protobuf:"bytes,1,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	Type          OrderType `protobuf:"varint,2,opt,name=type,enum=proto.OrderType" json:"type,omitempty"`
	MatchedPrice  float64   `protobuf:"fixed64,3,opt,name=matched_price,json=matchedPrice" json:"matched_price,omitempty"`
	MatchedVolume float64   `protobuf:"fixed64,4,opt,name=matched_volume,json=matchedVolume" json:"matched_volume,omitempty"`
	LeftVolume    float64   `protobuf:"fixed64,5,opt,name=left_volume,json=leftVolume" json:"left_volume,omitempty"`
}

func (m *MatchedOrder) Reset()                    { *m = MatchedOrder{} }
func (m *MatchedOrder) String() string            { return proto1.CompactTextString(m) }
func (*MatchedOrder) ProtoMessage()               {}
func (*MatchedOrder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MatchedOrder) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *MatchedOrder) GetType() OrderType {
	if m != nil {
		return m.Type
	}
	return OrderType_TYPE_UNKNOWN
}

func (m *MatchedOrder) GetMatchedPrice() float64 {
	if m != nil {
		return m.MatchedPrice
	}
	return 0
}

func (m *MatchedOrder) GetMatchedVolume() float64 {
	if m != nil {
		return m.MatchedVolume
	}
	return 0
}

func (m *MatchedOrder) GetLeftVolume() float64 {
	if m != nil {
		return m.LeftVolume
	}
	return 0
}

func init() {
	proto1.RegisterType((*OrderItem)(nil), "proto.OrderItem")
	proto1.RegisterType((*MatchedOrder)(nil), "proto.MatchedOrder")
	proto1.RegisterEnum("proto.TradingPair", TradingPair_name, TradingPair_value)
	proto1.RegisterEnum("proto.OrderType", OrderType_name, OrderType_value)
	proto1.RegisterEnum("proto.Position", Position_name, Position_value)
}

func init() { proto1.RegisterFile("exchange.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 416 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xd1, 0x6e, 0x9b, 0x30,
	0x18, 0x85, 0x67, 0x12, 0x42, 0xf2, 0x27, 0xcb, 0x2c, 0xab, 0x9a, 0x58, 0x6f, 0x8a, 0xba, 0x4d,
	0x42, 0x99, 0x44, 0xa5, 0xec, 0x66, 0x97, 0x23, 0x69, 0xb4, 0x59, 0x69, 0x00, 0x39, 0xee, 0xa6,
	0x5d, 0x21, 0x1a, 0x5c, 0x8a, 0x14, 0x62, 0x44, 0xdd, 0x69, 0x7d, 0xb7, 0xbd, 0xcc, 0xde, 0x64,
	0xc2, 0x40, 0xdb, 0xab, 0x5c, 0xa1, 0x73, 0xf8, 0xfe, 0xff, 0x1c, 0xdb, 0x30, 0x15, 0x7f, 0x76,
	0x77, 0xc9, 0x21, 0x13, 0x5e, 0x59, 0x49, 0x25, 0x89, 0xa9, 0x3f, 0xa7, 0x67, 0x99, 0x94, 0xd9,
	0x5e, 0x5c, 0x68, 0x75, 0xf3, 0x70, 0x7b, 0xa1, 0xf2, 0x42, 0xdc, 0xab, 0xa4, 0x28, 0x1b, 0xee,
	0xfc, 0x1f, 0x82, 0x51, 0x58, 0xa5, 0xa2, 0xa2, 0x4a, 0x14, 0xe4, 0x1d, 0x0c, 0x65, 0x2d, 0xe2,
	0x3c, 0xb5, 0x91, 0x83, 0xdc, 0x11, 0xb3, 0xb4, 0xa6, 0x29, 0xf9, 0x02, 0xa3, 0xa7, 0x59, 0xdb,
	0x70, 0x90, 0x3b, 0x9e, 0x9f, 0x7a, 0xcd, 0x76, 0xaf, 0xdb, 0xee, 0xf1, 0x8e, 0x60, 0xcf, 0x30,
	0xf9, 0x00, 0x7d, 0xf5, 0x58, 0x0a, 0xbb, 0xef, 0x20, 0x77, 0x3a, 0xc7, 0x0d, 0xed, 0xe9, 0x50,
	0xfe, 0x58, 0x0a, 0xa6, 0xff, 0x92, 0x4f, 0x30, 0x2c, 0xe5, 0x7d, 0xae, 0x72, 0x79, 0xb0, 0x4d,
	0x4d, 0xbe, 0x69, 0xc9, 0xa8, 0xb5, 0xd9, 0x13, 0x40, 0x4e, 0xc0, 0x2c, 0xab, 0x7c, 0x27, 0xec,
	0x81, 0x83, 0x5c, 0xc4, 0x1a, 0x41, 0xde, 0xc2, 0xe0, 0xb7, 0xdc, 0x3f, 0x14, 0xc2, 0xb6, 0xb4,
	0xdd, 0xaa, 0xf3, 0xbf, 0x08, 0x26, 0x9b, 0x44, 0xed, 0xee, 0x44, 0xaa, 0x53, 0x8f, 0x1d, 0xb3,
	0x2b, 0x6b, 0x1c, 0x2d, 0xfb, 0x1e, 0x5e, 0x17, 0xcd, 0xc2, 0xb8, 0xe9, 0xd1, 0xd3, 0x81, 0x93,
	0xd6, 0x8c, 0x74, 0x9d, 0x8f, 0x30, 0xed, 0xa0, 0xb6, 0x56, 0x5f, 0x53, 0xdd, 0xe8, 0x0f, 0x6d,
	0x92, 0x33, 0x18, 0xef, 0xc5, 0xad, 0xea, 0x18, 0x53, 0x33, 0x50, 0x5b, 0x0d, 0x30, 0xf3, 0x61,
	0xcc, 0xab, 0x24, 0xcd, 0x0f, 0x59, 0x94, 0xe4, 0x15, 0xb1, 0xe1, 0x84, 0x33, 0xff, 0x92, 0x06,
	0xdf, 0xe2, 0xc8, 0xa7, 0x2c, 0xbe, 0x0e, 0xd6, 0x41, 0xf8, 0x33, 0xc0, 0xaf, 0xc8, 0x18, 0xac,
	0x05, 0x5f, 0xc6, 0xd7, 0xdb, 0x4b, 0x8c, 0x3a, 0xc1, 0xbf, 0x2f, 0xb0, 0x31, 0xfb, 0xda, 0x3e,
	0x72, 0x7d, 0x04, 0x82, 0x61, 0xc2, 0x7f, 0x45, 0xab, 0x17, 0x83, 0x00, 0x83, 0x8d, 0xcf, 0xd6,
	0x2b, 0x8e, 0x11, 0x19, 0x81, 0x79, 0x45, 0x37, 0x94, 0x63, 0xa3, 0xb6, 0x97, 0x7e, 0xb0, 0x5c,
	0x5d, 0xe1, 0xde, 0x6c, 0x0e, 0xc3, 0xe8, 0xf9, 0xf6, 0x71, 0x14, 0x6e, 0x29, 0xa7, 0x61, 0xf0,
	0x62, 0x89, 0x05, 0xbd, 0x05, 0xad, 0x93, 0x2d, 0xe8, 0xf9, 0xdb, 0x35, 0x36, 0x6e, 0x06, 0xfa,
	0xf2, 0x3e, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x74, 0x95, 0x44, 0xe2, 0x9c, 0x02, 0x00, 0x00,
}
